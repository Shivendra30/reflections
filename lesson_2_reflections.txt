What happens when you initialize a repository? Why do you need to do it?

When we initialize the repository git creates a new repo with the file ".git" and also without any commits.
Git does not make the first commit since that we won't be able to enter a commit message.


How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area is sort of an intermediary between the working dir and the repo. it holds the files to be committed and allows the user to commit according to their own logic and in as many groups as they want

How can you use the staging area to make sure you have one commit per logical change?

We can use git diff to see that we have included only the relevant files that we want to commit.
We can also use git diff --staged to see the difference between the staging area and the repository to see what changes we haven't committed and if it makes sense to commit them. 


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches is that the commits now have a common history and there is no longer a need to see the commits by checking out two different branches. 
The diagram represents it so as the branches now have a common history sorted according to timestamp and the branch merged into the other can then be deleted since the commits of that branch can be accessed from the merged branch itself.


How do the diagrams help you visualize the branch structure?

The diagrams give a particularly clean understanding of reachability and helps to better explain complex topics like branches in git


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Cases where it makes sense to make a new branch is when we are not sure if a new feature will be a part of the main branch or not. Thus it is a good idea to make a new branch and see how that feature plays out first.


What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Git's automatic merging removes the overhead from the developer's hands in order to decide the order of the commits when two branches have been merged and how the changes have been kept. 
Manual merging can help to decide conflicts and make some decisions that Git cannot. For example, when faced with the different versions of the same code, git does not know what to do. 


